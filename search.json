[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement paniz.fazlali@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to textfeatureinfor","title":"Contributing to textfeatureinfor","text":"outlines propose change textfeatureinfor. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to textfeatureinfor","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to textfeatureinfor","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to textfeatureinfor","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UBC-MDS/textfeatureinfor\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to textfeatureinfor","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to textfeatureinfor","text":"Please note textfeatureinfor project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 textfeatureinfor authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/avg_word_len.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction to avg_word_len","text":"Natural Language Processing (NLP), data scientists may want: - extract additional characteristics text data - engineer features using additional characteristics - train models engineered features better model results avg_word_len function textfeatureinfo package one four functions aids text data extraction process. Specifically, avg_word_len makes easy extract average length words inside piece text. document provides detailed instructions apply avg_word_len function text data quick access new feature can added various machine learning models. can start loading textfeatureinfo package:","code":"library(textfeatureinfor)"},{"path":"/articles/avg_word_len.html","id":"quick-example-with-one-piece-of-text","dir":"Articles","previous_headings":"","what":"Quick example with one piece of text","title":"Introduction to avg_word_len","text":"understand basics avg_word_len function, can take look interaction simple text object. basic example, can see average length words piece text 4.33.","code":"text <- \"Star wars is my favourite movie\"  round(avg_word_len(text), 2) # the output of avg_word_len is rounded to 2 decimals #> [1] 4.33"},{"path":"/articles/avg_word_len.html","id":"example-with-a-dataframe","dir":"Articles","previous_headings":"","what":"Example with a dataframe","title":"Introduction to avg_word_len","text":"Now understand use function, let’s apply avg_word_len entire data set. practical aspect function considering feature extraction need done entire data-frames order useful machine learning models. Let’s first create toy data-set 5 examples: Now, leverage avg_word_len function extract average word lengths toy data add new column toy data frame Now access average length words example message toy data frame.","code":"toy_data <- data.frame(messages = c(   \"Hello World\",   \"Star wars is my favourite movie\",   \"Never have I ever\",   \"What a wonderful world\",   \"You should watch Spiderman: no way home\"   )) toy_data #>                                  messages #> 1                             Hello World #> 2         Star wars is my favourite movie #> 3                       Never have I ever #> 4                  What a wonderful world #> 5 You should watch Spiderman: no way home # applies avg_word_len function to each row in the data frame toy_data[\"average_word_lengths\"] <- apply(toy_data[\"messages\"],                                            1,                                           avg_word_len)   toy_data[\"average_word_lengths\"] <- round(toy_data[\"average_word_lengths\"], 2) toy_data #>                                  messages average_word_lengths #> 1                             Hello World                 5.00 #> 2         Star wars is my favourite movie                 4.33 #> 3                       Never have I ever                 3.50 #> 4                  What a wonderful world                 4.75 #> 5 You should watch Spiderman: no way home                 4.57"},{"path":"/articles/avg_word_len.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to avg_word_len","text":"avg_word_len function simple, broad implications. allows easier extraction useful text information one line code. feature useful natural language processing may prove useful building machine learning models.","code":""},{"path":[]},{"path":[]},{"path":"/articles/remove_stop_words.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction to remove_stop_words","text":"Natural Language Processing (NLP), data scientists may want: extract additional characteristics text data engineer features using additional characteristics train models engineered features better model results remove_stop_words function textfeatureinfo package one four functions aids text data extraction process. Specifically, remove_stop_words makes easy remove stopwords piece text. document provides detailed instructions apply remove_stop_words function text data quick access new feature can added various machine learning models. can start loading textfeatureinfo package:","code":"library(textfeatureinfor)"},{"path":"/articles/remove_stop_words.html","id":"quick-example-with-one-piece-of-text","dir":"Articles","previous_headings":"","what":"Quick example with one piece of text","title":"Introduction to remove_stop_words","text":"understand basics remove_stop_words function, can take look interaction simple text object. basic example, can see 5 words stopwords quote Albert Einstein.","code":"text <- \"Two things are infinite: the universe and human stupidity;  and I'm not sure about the universe.\"  remove_stop_words(text) #> [1] \"infinite\"  \"universe\"  \"human\"     \"stupidity\" \"\\nand\"     \"universe\""},{"path":"/articles/remove_stop_words.html","id":"example-with-a-dataframe","dir":"Articles","previous_headings":"","what":"Example with a dataframe","title":"Introduction to remove_stop_words","text":"Now understand use function, let’s apply remove_stop_words entire data set. practical aspect function considering feature extraction need done entire data-frames order useful machine learning models. Let’s first create toy data-set 5 examples: Now, leverage remove_stop_words function extract non-stopwords toy data add new column toy data frame: Now access non-stopwords example message toy data frame.","code":"toy_data <- data.frame(messages = c(   \"UBC MDS is an amazing program!\",   \"I don't like documentaries.\",   \"I am impressed by what machine learning is capable of doing.\",   \"NLP is a great way of processing text data.\",   \"Isn't that AMAZING? Only two more blocks to go!!\"   )) toy_data #>                                                       messages #> 1                               UBC MDS is an amazing program! #> 2                                  I don't like documentaries. #> 3 I am impressed by what machine learning is capable of doing. #> 4                  NLP is a great way of processing text data. #> 5             Isn't that AMAZING? Only two more blocks to go!! # applies remove_stop_words function to each row in the data frame toy_data <- toy_data |>     rowwise() |>     mutate(non_stopwords = list(remove_stop_words(messages))) |>     unnest(cols = c(non_stopwords)) toy_data #> # A tibble: 14 × 2 #>    messages                                                     non_stopwords #>    <chr>                                                        <chr>         #>  1 UBC MDS is an amazing program!                               ubc           #>  2 UBC MDS is an amazing program!                               mds           #>  3 UBC MDS is an amazing program!                               amazing       #>  4 UBC MDS is an amazing program!                               program       #>  5 I don't like documentaries.                                  documentaries #>  6 I am impressed by what machine learning is capable of doing. impressed     #>  7 I am impressed by what machine learning is capable of doing. machine       #>  8 I am impressed by what machine learning is capable of doing. learning      #>  9 I am impressed by what machine learning is capable of doing. capable       #> 10 NLP is a great way of processing text data.                  nlp           #> 11 NLP is a great way of processing text data.                  processing    #> 12 NLP is a great way of processing text data.                  data          #> 13 Isn't that AMAZING? Only two more blocks to go!!             amazing       #> 14 Isn't that AMAZING? Only two more blocks to go!!             blocks"},{"path":"/articles/remove_stop_words.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to remove_stop_words","text":"remove_stop_words function simple, broad implications. allows easier extraction useful text information one line code. feature useful natural language processing may prove useful building machine learning models.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lynn Wu. Author, maintainer. Kiran Phaterpekar. Author. Jacqueline Chong. Author. Paniz Fazlali. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu L, Phaterpekar K, Chong J, Fazlali P (2022). textfeatureinfor: Text Features. R package version 0.0.0.9000.","code":"@Manual{,   title = {textfeatureinfor: Text Features},   author = {Lynn Wu and Kiran Phaterpekar and Jacqueline Chong and Paniz Fazlali},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"textfeatureinfor","dir":"","previous_headings":"","what":"Text Features","title":"Text Features","text":"Link package website","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Text Features","text":"Natural Language Processing, common users try engineer features given text. can difficult extract certain features text without using additional R tools. R package includes functions allows data scientists extract information text features can useful feature engineering, data science projects. package, textfeatureinfor, help gather summary information plain text number punctuations text, average word lengths percentage fully capitalised words can useful information feature engineering. Additionally, package can also manipulate text data removing stopwords ease future processing steps. package functions inspired lab course, DSCI 573 (Feature model selection), UBC MDS program, tailored based experience interest.","code":""},{"path":"/index.html","id":"function-details","dir":"","previous_headings":"","what":"Function Details","title":"Text Features","text":"count_punc: function count return number punctuations within given text. avg_word_len: function calculate return average length words within given text. perc_cap_words: function calculate percentage fully capitalised words text. remove_stop_words: function find remove stop words text return list clean words.","code":""},{"path":"/index.html","id":"r-ecosystem","dir":"","previous_headings":"","what":"R Ecosystem","title":"Text Features","text":"field text feature engineering, cognisant well established packages R ecosystem - specifically textfeatures, qdap stopwords. punctuations, aware textfeatures package can used find number punctuations string. calculate average word length, textfeatures qdap able find count words provide average length. count number fully capitalised words text, textfeatures provides means find number capitalized characters, count explicitly. case stopwords, package stopwords provides list stopwords different languages. However, function remove stopwords text. Based experience previous module, functions seek use require several lines code. example, calculate average word length, need extract punctuation, count total number characters, averaging number words present. , seek simplify tasks functions users, including , can employ one line code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Text Features","text":"can install development version textfeatureinfor GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"UBC-MDS/textfeatureinfor\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Text Features","text":"basic example shows solve common problem:","code":"library(textfeatureinfor) count_punc(\"Hello, World!\") #> [1] 2 avg_word_len(\"Here are some words\") #> [1] 4 perc_cap_words(\"This is REALLY Awesome!\") #> [1] 25 remove_stop_words(\"Tomorrow is a big day!\") #> [1] \"tomorrow\""},{"path":"/reference/avg_word_len.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average word length in a string — avg_word_len","title":"Calculate average word length in a string — avg_word_len","text":"Calculate average word length string","code":""},{"path":"/reference/avg_word_len.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average word length in a string — avg_word_len","text":"","code":"avg_word_len(text)"},{"path":"/reference/avg_word_len.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average word length in a string — avg_word_len","text":"text character vector average word length extraction.","code":""},{"path":"/reference/avg_word_len.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average word length in a string — avg_word_len","text":"numeric vector representing average word length text.","code":""},{"path":"/reference/avg_word_len.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate average word length in a string — avg_word_len","text":"","code":"x <- \"Here are some words\" avg_word_len(x) #> [1] 4 4 #> [1] 4"},{"path":"/reference/count_punc.html","id":null,"dir":"Reference","previous_headings":"","what":"Count punctuations — count_punc","title":"Count punctuations — count_punc","text":"Count punctuations","code":""},{"path":"/reference/count_punc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count punctuations — count_punc","text":"","code":"count_punc(text)"},{"path":"/reference/count_punc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count punctuations — count_punc","text":"text character vector , , one element.","code":""},{"path":"/reference/count_punc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count punctuations — count_punc","text":"vector containing number punctuations.","code":""},{"path":"/reference/count_punc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count punctuations — count_punc","text":"","code":"x <- \"Hello, World!\" count_punc(x) #> [1] 2 2 #> [1] 2"},{"path":"/reference/perc_cap_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage of fully capitalised words in a string — perc_cap_words","title":"Percentage of fully capitalised words in a string — perc_cap_words","text":"Percentage fully capitalised words string","code":""},{"path":"/reference/perc_cap_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage of fully capitalised words in a string — perc_cap_words","text":"","code":"perc_cap_words(text)"},{"path":"/reference/perc_cap_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage of fully capitalised words in a string — perc_cap_words","text":"text character vector length one containing piece text analyze.","code":""},{"path":"/reference/perc_cap_words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentage of fully capitalised words in a string — perc_cap_words","text":"vector containing number fully capitalised words","code":""},{"path":"/reference/perc_cap_words.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage of fully capitalised words in a string — perc_cap_words","text":"","code":"text <- \"This is REALLY Awesome!\" perc_cap_words(text) #> [1] 25 25 #> [1] 25"},{"path":"/reference/remove_stop_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove stop words — remove_stop_words","title":"Remove stop words — remove_stop_words","text":"Remove stop words","code":""},{"path":"/reference/remove_stop_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove stop words — remove_stop_words","text":"","code":"remove_stop_words(text)"},{"path":"/reference/remove_stop_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove stop words — remove_stop_words","text":"text character vector length one containing piece text analyze.","code":""},{"path":"/reference/remove_stop_words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove stop words — remove_stop_words","text":"character vector containing words text stop words.","code":""},{"path":"/reference/remove_stop_words.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove stop words — remove_stop_words","text":"","code":"text <- \"Tomorrow is a big day!\" remove_stop_words(text) #> [1] \"tomorrow\" \"tomorrow\" #> [1] \"tomorrow\""}]
